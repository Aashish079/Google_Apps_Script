const API_ENDPOINT = "localhost:3000/api/translate";
const API_KEY = "your_api_key";
const BATCH_SIZE = 100; //Number of rows to process in each batch

const SOURCE_SHEET_NAME = "Open Question";
const DESTINATION_SHEET_NAME = "Results data";

// Creates a custom menu in Sheets to run the script
// function runs automatically when the spreadsheet is opened
function onOpen() {
  const ui = SpreadSheetsApp.getUi();

  ui.createMenu("API Tools")
    .addItem("Process All Data", "processDataInBatches")
    .addToUi();
}

//  Main function to fetch, batch, and process data

function processDataInBatches() {}

/**
 * Sends a single batch of data to the API endpoint.
 * @param {Array<Object>} payload - The data payload to send.
 * @returns {Array<Array>} The processed data to be written to the sheet.
 */
function sendBatchToApi(payload) {
  const options = {
    method: "POST",
    contentType: "application/json",
    headers: {
      Authorization: `Bearer ${API_KEY}`,
    },
    payload: JSON.stringify(payload),
  };

  Logger.log("Sending payload to API:" + JSON.stringify(payload));
  const response = UrlFetchApp.fetch(API_ENDPOINT, options);
  const responseCode = response.getResponseCode();
  Logger.log("Response Code: " + responseCode);
  const responseBody = response.getContentText();
  Logger.log("Response Body: " + responseBody);

  if (responseCode == 200) {
    const jsonResponse = JSON.parse(responseBody);
    Logger.log("Received successful response from API.");

    // Assuming the API returns an array of objects, each with a status and message.

    return jsonResponse.data.map((item) => [
      item.originalId,
      item.status,
      new Date(),
    ]);
  } else {
    Logger.log(
      `API returned an error. Code: ${responseCode}. Body: ${responseBody}`
    );
    // Throw an error to be caught by the main function
    throw new Error(`API Error: ${responseCode} - ${responseBody}`);
  }
}

/**
 * Appends the API response data to the destination sheet.
 * @param {Sheet} sheet - The Google Sheet object to write to.
 * @param {Array<Array>} data - The 2D array of data to write.
 * @param {boolean} isError - Flag to indicate if this is an error write.
 */
function writeResponseToSheet(sheet, data, isError = false) {
    if (!data || data.length === 0) {
        Logger.log("No data to write to the sheet.");
        return;
    }

    // If writing an error response that wasn't generated by the API,
    if(isError) {
        sheet.getRange(sheet.getLastRow() + 1, 1, data.length, data[0].length)
            .setValues(data);
        return;
    }
    // Gett the last row and append the new data
    const lastRow = sheet.getLastRow();
    sheet.getRange(lastRow + 1, 1, data.length, data[0].length)
        .setValues(data);
    Logger.log(`Wrote ${data.length} rows to the sheet.`);
}