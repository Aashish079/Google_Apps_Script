const API_ENDPOINT = "localhost:3000/api/translate";
const API_KEY = "api_key";
const BATCH_SIZE = 100; //Number of rows to process in each batch

const SOURCE_SHEET_NAME = "Open Question";
const DESTINATION_SHEET_NAME = "Results data";

// Creates a custom menu in Sheets to run the script
// function runs automatically when the spreadsheet is opened
function onOpen() {
  const ui = SpreadSheetsApp.getUi();

  ui.createMenu("API Tools")
    .addItem("Process All Data", "processDataInBatches")
    .addToUi();
}

//  Main function to fetch, batch, and process data

function processDataInBatches() {
  const ss = SpreadSheetsApp.getActiveSpreadsheet();
  const sourceSheet = ss.getSheetByName(SOURCE_SHEET_NAME);
  const destinationSheet = ss.getSheetByName(DESTINATION_SHEET_NAME);
  if (!sourceSheet || !destinationSheet) {
    Logger.log("Source or destination sheet not found.");
    return;
  }
  Logger.log("Starting data processing...");

  //Getting all the data from src sheet, excluding the header row
  const dataRange = sourceSheet.getDataRange();
  const allData = dataRange.getValues();
  const header = allData.shift(); // Remove the header row
  Logger.log(`Total rows to process: ${allData.length}`);

  // Process data in batches
  for (let i = 0; i < allData.length; i += BATCH_SIZE) {
    const batch = allData.slice(i, i + BATCH_SIZE);
    Logger.log(
      `Processing batch starting at row ${i + 2} with ${batch.length} rows.`
    );

    // Prepare data payload for the API
    const payload = batch.map((column) => {
      // Assuming the API wants an array of objects.
      return {
        question: column[0],
        question_speciality: column[1],
        question_category: column[2],
        reasoning_for_answer: column[3],
        answer: column[4],
        references: column[5],
        author: column[6],
        date: column[7],
      };
    });

    try {
      // Sending the batch to the API
      const responseData = sendBatchToApi(payload);
      // Writing the successful response back to the destination sheet
      writeResponseToSheet(destinationSheet, responseData);
    } catch (e) {
      // Log errors for debugging
      Logger.log(
        `Error processing batch starting at row ${i + 2}. Error: ${e.message}`
      );
      // Optionally write error status to the sheet
      const errorResponse = batch.map((row) => [
        row[0],
        "Error",
        e.message,
        new Date(),
      ]);
      writeResponseToSheet(destinationSheet, errorResponse, true);
    }

    SpreadsheetApp.getUi().alert("All data has been processed!");
    Logger.log("Finished processing all batches.");
  }
}

/**
 * Sends a single batch of data to the API endpoint.
 * @param {Array<Object>} payload - The data payload to send.
 * @returns {Array<Array>} The processed data to be written to the sheet.
 */
function sendBatchToApi(payload) {
  const options = {
    method: "POST",
    contentType: "application/json",
    headers: {
      Authorization: `Bearer ${API_KEY}`,
    },
    payload: JSON.stringify(payload),
  };

  Logger.log("Sending payload to API:" + JSON.stringify(payload));
  const response = UrlFetchApp.fetch(API_ENDPOINT, options);
  const responseCode = response.getResponseCode();
  Logger.log("Response Code: " + responseCode);
  const responseBody = response.getContentText();
  Logger.log("Response Body: " + responseBody);

  if (responseCode == 200) {
    const jsonResponse = JSON.parse(responseBody);
    Logger.log("Received successful response from API.");

    // Assuming the API returns an array of objects, each with a status and message.

    return jsonResponse.data.map((item) => [
      item.originalId,
      item.status,
      new Date(),
    ]);
  } else {
    Logger.log(
      `API returned an error. Code: ${responseCode}. Body: ${responseBody}`
    );
    // Throw an error to be caught by the main function
    throw new Error(`API Error: ${responseCode} - ${responseBody}`);
  }
}

/**
 * Appends the API response data to the destination sheet.
 * @param {Sheet} sheet - The Google Sheet object to write to.
 * @param {Array<Array>} data - The 2D array of data to write.
 * @param {boolean} isError - Flag to indicate if this is an error write.
 */

function writeResponseToSheet(sheet, data, isError = false) {
  if (!data || data.length === 0) {
    Logger.log("No data to write to the sheet.");
    return;
  }

  // If writing an error response that wasn't generated by the API,
  if (isError) {
    sheet
      .getRange(sheet.getLastRow() + 1, 1, data.length, data[0].length)
      .setValues(data);
    return;
  }
  // Gett the last row and append the new data
  const lastRow = sheet.getLastRow();
  sheet.getRange(lastRow + 1, 1, data.length, data[0].length).setValues(data);
  Logger.log(`Wrote ${data.length} rows to the sheet.`);
}
